% This code is a MATLAB example to handle the fixed-size telemetry provided by the Arduino.
% See format details in MecatroUtils.cpp

% % Look for Arduino serial port
% port_name = [];
% ports = serialportlist;
% for i = 1:length(ports)
%     port = ports(i);
%     info = instrhwinfo('serial');
%     if contains(info.SerialPorts.Description, "USB Serial")
%         port_name = port;
%         break;
%     end
% end
% 
% if isempty(port_name)
%     error('Arduino not found');
% end
clear 

Tmax = 20;
port_name = "/dev/cu.usbserial-14210";

% For efficiency, pre-allocate data holders
MAX_DATA_LENGTH = 1000000;
log_time = zeros(1, MAX_DATA_LENGTH);
data_values = containers.Map();

% Store the index of where we are at in the time vector
current_idx = 0;

% Open serial port at 1Mbps
s = serialport(port_name, 1000000, 'Timeout', 1.0);

% The Arduino will reboot when the port is open, but we might still get some data from the previous run.
% To avoid this, we wait for the Arduino to start its reboot sequence, then clear the input buffer.
pause(0.5);
flush(s);
tic
myTime = toc;
while true
    % Wait for the start of a frame, aka @ 
    while myTime < Tmax 
        myTime = toc;
        b = read(s, 1, 'uint8');
        if char(b) == '@'
            break;
        end
    end
    
    % We have read the @, now we need to decode the message
    % The next 6 bytes are the variable's name, to be interpreted as ascii characters.
    name = char(read(s, 6, 'char'));
    % Remove trailing spaces
    name = strtrim(name);
    
    % Next we read the next 4 bytes, the variable value.
    data = read(s, 4, 'uint8');
    % Now we have two cases: are we dealing with an unsigned int (timestamp) or a float?
    if strcmp(name, 'TS')
        % Read unsigned int32, little endian (i.e. LSB first).
        current_time = typecast(uint8(data), 'uint32');
        current_time = cast(current_time,'double');
        % Increment index and store time
        current_idx = current_idx + 1;
        if current_idx >= MAX_DATA_LENGTH
            error('Experiment too long for buffer - you are very patient!');
        end
        log_time(current_idx) = current_time / 1.0e6;
    else
        % We received a float variable, little endian
        value = typecast(uint8(data), 'single');
        
        % If the variable does not exist, create it
        if ~isKey(data_values, name)
            data_values(name) = zeros(1, MAX_DATA_LENGTH);
        end
        
        % Update the value at the current index
        values = data_values(name);
        values(current_idx) = value;
        data_values(name) = values;
    end
    % For testing: stop after 1000 points i.e. 5s
%     if current_idx > 20000 || myTime > Tmax
    if myTime > Tmax
        break;
    end
end
% Crop to remove unused points
% log_time = log_time(1:current_idx);
% data_values = containers.Map(data_values.keys, cellfun(@(v) v(1:current_idx), data_values.values, 'UniformOutput', false));
%%
% Plot test
figure;
hold on;
legend_labels = data_values.keys;
for i = 1:numel(legend_labels)
    d = legend_labels{i};
    v = data_values(d);
    plot(log_time, v, 'DisplayName', d);
end
hold off;
legend('Location', 'best');
grid on;
